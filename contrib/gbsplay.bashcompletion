#!/bin/bash
#
# gbsplay/gbsinfo bash completion
#
# 2008-2025 (C) Christian Garbs <mitch@cgarbs.de>
# licensed under GNU GPL v1 or, at your option, any later version
#
# originally based on the ditz bash completion code

__gbsplay_add_spaces_to_compreply()
{
    # add trailing spaces
    local i
    for (( i=0; i < ${#COMPREPLY[@]}; i++ )); do
	COMPREPLY[i]="${COMPREPLY[$i]} "
    done
}

__gbsplay_expand_filename()
# TODO/CHECK: do all file extensions work (eg .gbs.gz)?
{
    COMPREPLY=()
    local i

    # add trailing space to filenames
    local -a files
    mapfile -t files < <( compgen -f -X '!*.gbs' -- "$cur" ) # does not work: | sed -e 's/\([[:space:]]\)/\\\1/g'
    for (( i=0; i < ${#files[@]}; i++ )); do
	COMPREPLY[${#COMPREPLY[@]}]="${files[$i]} "
    done

    # add trailing slash to directories
    local -a dirs
    mapfile -t dirs < <( compgen -d -- "$cur" )
    for (( i=0; i < ${#dirs[@]}; i++ )); do
	COMPREPLY[${#COMPREPLY[@]}]="${dirs[$i]}/"
    done
}

__gbsplay_expand_subsongs()
{
    mapfile -t COMPREPLY < <( compgen -W "$(seq "$(gbsinfo "${COMP_WORDS[filepos]}" 2>/dev/null | grep ^Subsongs | cut -d: -f 2)" 2>/dev/null)" -- "$cur" )
    __gbsplay_add_spaces_to_compreply
}

__gbsplay()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[$(( COMP_CWORD - 1))]}

    if [ "${cur:0:1}" = '-' ] && ! [ "$prev" = '--' ]; then
	# ==> looks like an option, return list of all options
	mapfile -t COMPREPLY < <( compgen -W "-E -f -g -h -H -l -L -o -q -r -R -t -T -v -V -z -Z -1 -2 -3 -4 --" -- "$cur" )
	__gbsplay_add_spaces_to_compreply

    elif [[ "$prev" =~ ^-.*o$ ]]; then
	# ==> previous word contained -o, return list of output plugins
	mapfile -t COMPREPLY < <( compgen -W "$(gbsplay -o list 2>/dev/null | ( read -r; cut -d -  -f 1 )) list" -- "$cur" )
	__gbsplay_add_spaces_to_compreply

    else
	# calculate position of filename
	local filepos=1 check=
	while [ "${COMP_WORDS[filepos]:0:1}" = '-' ]; do
	    check=${COMP_WORDS[$filepos]}
	    if [[ "$check" =~ ^-.*o$ ]]; then
		# jump over parameter to -o
		(( filepos++ ))
	    fi
	    (( filepos++ ))
	    # immediately break on "end of options"
	    [ "$check" = '' ] && break
	done

	local after_filepos=$(( COMP_CWORD - filepos ))
	if [ $after_filepos -eq 0 ] ; then
	    # ==> this is the filename
	    __gbsplay_expand_filename

	elif [ $after_filepos -eq 1 ] ; then
	    # ==> this is the subsong start
	    __gbsplay_expand_subsongs

	elif [ $after_filepos -eq 2 ] ; then
	    # ==> this is the subsong stop...
	    if [[ ${COMP_WORDS[COMP_CWORD - 1]} =~ ^[0-9]+$ ]] ; then
		# ...but only if subsong start was given before
		__gbsplay_expand_subsongs
	    fi
	fi
    fi
}

__gbsinfo()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    local prev=${COMP_WORDS[$(( COMP_CWORD - 1))]}

    if [ "${cur:0:1}" = '-' ] && ! [ "$prev" = '--' ]; then
	# ==> looks like an option, return list of all options
	mapfile -t COMPREPLY < <( compgen -W "-h -V --" -- "$cur" )
	__gbsplay_add_spaces_to_compreply

    else
	# calculate position of filename
	local filepos=1 check=
	while [ "${COMP_WORDS[filepos]:0:1}" = '-' ]; do
	    check=${COMP_WORDS[$filepos]}
	    (( filepos++ ))
	    # immediately break on "end of options"
	    [ "$check" = '' ] && break
	done

	local after_filepos=$(( COMP_CWORD - filepos ))
	if [ $after_filepos -eq 0 ] ; then
	    # ==> this is the filename
	    __gbsplay_expand_filename
	fi
    fi
}

complete -F __gbsplay -o default -o nospace gbsplay
complete -F __gbsinfo -o default -o nospace gbsinfo
